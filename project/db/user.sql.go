// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCompany = `-- name: CreateCompany :one
INSERT INTO "company" (name, address) VALUES ($1, $2) RETURNING id, name, address
`

type CreateCompanyParams struct {
	Name    pgtype.Text `json:"name"`
	Address pgtype.Text `json:"address"`
}

func (q *Queries) CreateCompany(ctx context.Context, arg CreateCompanyParams) (Company, error) {
	row := q.db.QueryRow(ctx, createCompany, arg.Name, arg.Address)
	var i Company
	err := row.Scan(&i.ID, &i.Name, &i.Address)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO "user" (name, email, company_id) VALUES ($1, $2, $3) RETURNING id, name, email, company_id
`

type CreateUserParams struct {
	Name      pgtype.Text `json:"name"`
	Email     pgtype.Text `json:"email"`
	CompanyID pgtype.Int4 `json:"company_id"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Name, arg.Email, arg.CompanyID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.CompanyID,
	)
	return i, err
}

const getCompanies = `-- name: GetCompanies :many
SELECT id, name, address FROM "company"
`

func (q *Queries) GetCompanies(ctx context.Context) ([]Company, error) {
	rows, err := q.db.Query(ctx, getCompanies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Company
	for rows.Next() {
		var i Company
		if err := rows.Scan(&i.ID, &i.Name, &i.Address); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCompany = `-- name: GetCompany :one
SELECT id, name, address FROM "company" WHERE id = $1
`

func (q *Queries) GetCompany(ctx context.Context, id int32) (Company, error) {
	row := q.db.QueryRow(ctx, getCompany, id)
	var i Company
	err := row.Scan(&i.ID, &i.Name, &i.Address)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, name, email, company_id FROM "user" WHERE id = $1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.CompanyID,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, name, email, company_id FROM "user"
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.CompanyID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE "user" SET name = $1, email = $2, company_id = $3 WHERE id = $4 RETURNING id, name, email, company_id
`

type UpdateUserParams struct {
	Name      pgtype.Text `json:"name"`
	Email     pgtype.Text `json:"email"`
	CompanyID pgtype.Int4 `json:"company_id"`
	ID        int32       `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.Name,
		arg.Email,
		arg.CompanyID,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.CompanyID,
	)
	return i, err
}
