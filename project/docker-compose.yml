version: '3'
services:
  postgres:
    image: postgres:16.4-alpine3.20
    container_name: go_postgres
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: 123
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - go_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U root -d postgres"]
      interval: 3s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: go_backend
    environment:
      - SERVER_HOST=0.0.0.0
      - SERVER_PORT=5000
      - SERVER_READ_TIMEOUT=60
      - JWT_SECRET_KEY=secret
      - JWT_REFRESH_KEY=refresh
      - DB_HOST=go_postgres
      - DB_PORT=5432
      - DB_USER=root
      - DB_PASSWORD=123
      - DB_NAME=postgres
      - DB_SSL_MODE=disable
      - DB_MAX_CONNECTIONS=100
      - DB_MAX_IDLE_CONNECTIONS=10
      - DB_MAX_LIFETIME_CONNECTIONS=2
      - DATABASE_URL=postgres://root:123@go_postgres/postgres?sslmode=disable
    depends_on:
      - postgres
    ports:
      - "5000:5000"
    networks:
      - go_network

  migrate:
    image: migrate/migrate
    container_name: go_migrate
    entrypoint: [
      "migrate", 
      "-path", "/migrations", 
      "-database", "postgres://root:123@go_postgres:5432/postgres?sslmode=disable", 
      "up"
    ]
    volumes:
      - ./backend/platform/migrations:/migrations
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - go_network

volumes:
  postgres_data:

networks:
  go_network:
